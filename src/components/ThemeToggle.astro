---
interface Props extends astroHTML.JSX.ButtonHTMLAttributes {}

const { class: className, ...props } = Astro.props
---

<button
	id="theme-toggle"
	class:list={["theme-toggle", className]}
	aria-label="auto"
	aria-live="polite"
	{...props}
>
	<svg
		class="sun-and-moon"
		aria-hidden="true"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		stroke-linecap="round"
	>
		<mask class="moon" id="moon-mask">
			<rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
			<circle cx="24" cy="10" r="6" fill="black"></circle>
		</mask>
		<circle class="sun" cx="12" cy="12" r="6" mask="url(#moon-mask)" fill="currentColor"></circle>
		<g class="sun-beams" stroke="currentColor" stroke-width="2">
			<line x1="12" y1="1" x2="12" y2="3"></line>
			<line x1="12" y1="21" x2="12" y2="23"></line>
			<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
			<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
			<line x1="1" y1="12" x2="3" y2="12"></line>
			<line x1="21" y1="12" x2="23" y2="12"></line>
			<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
			<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
		</g>
	</svg>
</button>

<style>
	.theme-toggle {
		--size: 24px;
		inline-size: var(--size);
		block-size: var(--size);
		touch-action: manipulation;
		-webkit-tap-highlight-color: transparent;
		transition: color 300ms;
	}

	@media (hover: hover) {
		.theme-toggle {
			color: hsl(var(--text-hsl) / 0.7);
		}

		.theme-toggle:hover {
			color: var(--text);
		}
	}

	.sun-and-moon {
		inline-size: 100%;
		block-size: 100%;
	}

	.sun-and-moon > :is(.moon, .sun, .sun-beams) {
		transform-origin: center;
	}

	html[data-theme="dark"] .sun-and-moon > .sun {
		transform: scale(1.75);
	}

	html[data-theme="dark"] .sun-and-moon > .sun-beams {
		opacity: 0;
	}

	html[data-theme="dark"] .sun-and-moon > .moon > circle {
		transform: translate(-7px);
	}

	@supports (cx: 1) {
		html[data-theme="dark"] .sun-and-moon > .moon > circle {
			transform: translate(0);
			cx: 17;
		}
	}

	@media (prefers-reduced-motion: no-preference) {
		.sun-and-moon > .sun {
			transition: transform 0.5s var(--ease-elastic-3);
		}

		.sun-and-moon > .sun-beams {
			transition:
				transform 0.5s var(--ease-elastic-4),
				opacity 0.5s var(--ease-3);
		}

		.sun-and-moon .moon > circle {
			transition: transform 0.25s var(--ease-out-5);
		}

		@supports (cx: 1) {
			.sun-and-moon .moon > circle {
				transition: cx 0.25s var(--ease-out-5);
			}
		}

		html[data-theme="dark"] .sun-and-moon > .sun {
			transform: scale(1.75);
			transition-timing-function: var(--ease-3);
			transition-duration: 0.25s;
		}

		html[data-theme="dark"] .sun-and-moon > .sun-beams {
			transform: rotate(-25deg);
			transition-duration: 0.15s;
		}

		html[data-theme="dark"] .sun-and-moon > .moon > circle {
			transition-delay: 0.25s;
			transition-duration: 0.5s;
		}
	}
</style>

<script>
	import { $ } from "~/utils"

	const themeToggle = $("#theme-toggle")!
	const storageKey = "theme-preference"

	const getTheme = () => {
		return localStorage.getItem(storageKey)!
	}

	let oppositeTheme = getTheme()

	const setAccesibilityData = () => {
		const themeTitle = getTheme() === "light" ? "Cambiar a modo oscuro" : "Cambiar a modo claro"

		themeToggle.setAttribute("title", themeTitle)
	}

	setAccesibilityData()

	const setPreference = () => {
		localStorage.setItem(storageKey, oppositeTheme)
		reflectPreference()
	}

	const reflectPreference = () => {
		document.firstElementChild!.setAttribute("data-theme", oppositeTheme)
		setAccesibilityData()
	}

	const onClick = () => {
		oppositeTheme = oppositeTheme === "light" ? "dark" : "light"
		setPreference()
	}

	themeToggle.addEventListener("click", onClick)
</script>
