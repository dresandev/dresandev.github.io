---
interface Props {
	contentClass?: string
}

const { contentClass, ...props } = Astro.props
---

<button id="contact-button" class="button">
	<span class:list={["content", contentClass]} {...props}>Contactar</span>
</button>

<style>
	html[data-theme="dark"] .button::before {
		--gradient: linear-gradient(
			115deg,
			hsl(135, 57%, 56%),
			var(--brand-fill),
			hsl(270, 71%, 65%),
			hsl(313, 100%, 50%),
			hsl(197, 99%, 53%),
			hsl(144, 58%, 54%)
		);
	}

	html[data-theme="light"] .button::before {
		--gradient: linear-gradient(
			115deg,
			hsl(135, 100%, 30%),
			var(--brand-fill),
			hsl(270, 100%, 31%),
			hsl(313, 100%, 50%),
			hsl(197, 100%, 32%),
			hsl(144, 100%, 31%)
		);
	}

	.button {
		position: relative;
		padding: 1.5px;
		font-weight: 500;
		border-radius: 4px;
		overflow: hidden;
	}

	.button:active {
		transform: scale(0.98);
	}

	.button::before {
		content: "";
		position: absolute;
		inset-block-start: 0;
		inset-inline-start: 0;
		inline-size: 400%;
		block-size: 100%;
		background-image: var(--gradient);
		background-size: 50%;
		animation: move-bg 2s linear infinite;
		animation-play-state: paused;
	}

	.button:hover::before {
		animation-play-state: running;
	}

	.content {
		position: relative;
		display: inline-block;
		padding: 8px 20px;
		background-color: var(--surface);
		border-radius: 4px;
		transition: background-color 300ms;
	}

	@keyframes move-bg {
		to {
			transform: translateX(-50%);
		}
	}
</style>

<script>
	import { $ } from "~/utils"

	const contactModal = $("#contact-modal")!
	const contactButton = $("#contact-button")!

	contactButton.addEventListener("click", () => {
		contactModal.classList.add("open")
		document.body.classList.add("hide-overflow")
		contactModal.focus()
	})
</script>
